Git commands
1. git status
2. git add .
3. git commit -m "comment"
4. git push
5. git checkout branch_name (switch to another branch)
6. git checkout -b branch_name (to create new branch)
7. git pull
8. git merge (merge changes from another branch)

# Topics
1. To create new react project (npx create-react-app project-name)
2. Created components in project
3. State and Props 
4. Conditional (styles, className, components render)
5. Event Handling (onChange, onClick)
6. Reusable component
7. React Hooks
   1. useState
   2. useEffect
   3. useRef
   4. useReducer
   5. useMemo
   6. useCallback
   7. useContext
   8. Custom Hooks

==========================
input field: Name, contact, email

=================================

studentList =[{
   id,
   name,
   branch,
   conatct
}]

Serach (add input field to search),
Delete

===============================
number;
studentList ['Ravi']

find square number from number when number state is changed..

======================================
state: count, todos
useCallback

=================== Syntax ==========================
// state
const [count, setCount] = useState(0)

// useEffect
useEffect(()=>{
   console.log("useEffect Called");
})

useEffect(()=>{
   console.log("useEffect Called");
},[count])

// useRef
const count = useRef(10);
console.log(count.current)

const inputElement = useRef();
<input type='text' ref={inputElement} placeholder='Enter text..' />

// useReducer
const countReducer = (state, action) => {
    switch (action.type) {
        case "DECREASE":
            return state - 1;
        case "INCREASE":
            return state + 1;
        default:
            return state;
    }
}
const [count, dispatch] = useReducer(countReducer, 10)

// useMemo
const squaredNum = useMemo(() => squareNum(number), [number])

//useCallback
const squaredNumFun = useCallback((num) => { setNumber(Math.pow(num, 2)) }, [number])

// Custom Hooks
const useTodos = (todos) => {

    const updateTodo = (id) => { }

    const deleteTodo = (id) => { }

    return [todos, updateTodo, deleteTodo]
}
const [todos, updateTodo, deleteTodo] = useTodos(initialTodos);


// useContext 

const UserContext = createContext({ name: "Surya" })

export default function UseContextExample() {
    const user = { name: "Ravi" }
    return (
        <UserContext.Provider value={user}>
            <ChildComponentOne user={user} />
        </UserContext.Provider>
    )
}
// To receive the context value.
const user = useContext(UserContext)